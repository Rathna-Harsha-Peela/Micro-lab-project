C51 COMPILER V9.60.7.0   MASTER                                                            04/11/2025 02:53:37 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN .\Objects\master.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE master.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ma
                    -ster.lst) TABS(2) OBJECT(.\Objects\master.obj)

line level    source

   1          #include <AT89C5131.h>
   2          #include "lcd.h"
   3          #include "serial.h"
   4          
   5          sbit SS = P1^4;  // Slave Select
   6          
   7          bit transmit_completed = 0;
   8          unsigned char temp_spi_data;
   9          char int_ascii[3] = {0, 0, '\0'};
  10          
  11          void delay() {
  12   1          int i, j;
  13   1          for(i=0;i<300;i++) for(j=0;j<1275;j++);  // Short delay
  14   1      }
  15          
  16          void spi_init(void) {
  17   1          SPCON = 0xBE;  // Master mode, CPOL=1, CPHA=1, Fclk/16
  18   1          IEN1 |= 0x04;  // Enable SPI interrupt
  19   1          EA = 1;        // Enable global interrupt
  20   1          SPCON |= 0x40; // Enable SPI
  21   1      }
  22          
  23          void spi_interrupt(void) interrupt 9 {
  24   1          if (SPSTA & 0x80) {
  25   2              temp_spi_data = SPDAT;
  26   2              transmit_completed = 1;
  27   2          }
  28   1      }
  29          
  30          unsigned char spi_trx(unsigned char dat) {
  31   1          transmit_completed = 0;
  32   1          SPDAT = dat;
  33   1          while (!transmit_completed);  // Wait for transfer to complete
  34   1          return temp_spi_data;
  35   1      }
  36          
  37          void main() {
  38   1          unsigned char prime11= 0,prime12 =0;
  39   1        unsigned char prime1=0, prime2 =0, prime3=0, prime4=0, prime5=0, prime6=0;
  40   1          unsigned char result;
  41   1        unsigned char ch;
  42   1        
  43   1          lcd_init();
  44   1          lcd_cmd(0x80);
  45   1        
  46   1          uart_init(); //Initialising UART
  47   1      
  48   1          transmit_string("Send the primes\r\n");
  49   1          lcd_write_string("Waiting for data");
  50   1        
  51   1      ch = receive_char();
  52   1      prime11 = ch - 48;
  53   1      ch=receive_char();
  54   1      prime12 = ch - 48;
C51 COMPILER V9.60.7.0   MASTER                                                            04/11/2025 02:53:37 PAGE 2   

  55   1      prime1 = prime11*10 + prime12;
  56   1      lcd_cmd(0x01);
  57   1      lcd_cmd(0x80);
  58   1      lcd_write_string("Received ");
  59   1      int_to_string(prime1, int_ascii);
  60   1      lcd_write_string(int_ascii);
  61   1      lcd_cmd(0xC0);
  62   1      
  63   1      lcd_write_string("Send second..");
  64   1      msdelay(50);  
  65   1      ch = receive_char();
  66   1      prime11 = ch - 48;
  67   1      ch=receive_char();
  68   1      prime12 = ch- 48;
  69   1      prime2 = prime11*10 + prime12;
  70   1      lcd_cmd(0x01);
  71   1      lcd_cmd(0x80);
  72   1      lcd_write_string("Received ");
  73   1      int_to_string(prime2, int_ascii);
  74   1      lcd_write_string(int_ascii);
  75   1      msdelay(50);
  76   1      
  77   1      
  78   1      ch = receive_char();
  79   1      prime11 = ch - 48;
  80   1      ch=receive_char();
  81   1      prime12 = ch - 48;
  82   1      prime3 = prime11*10 + prime12;
  83   1      lcd_cmd(0x01);
  84   1      lcd_cmd(0x80);
  85   1      lcd_write_string("Received ");
  86   1      int_to_string(prime3, int_ascii);
  87   1      lcd_write_string(int_ascii);
  88   1      lcd_cmd(0xC0);
  89   1      msdelay(10);
  90   1      
  91   1      
  92   1      
  93   1      ch = receive_char();
  94   1      prime11 = ch - 48;
  95   1      ch=receive_char();
  96   1      prime12 = ch - 48;
  97   1      prime4 = prime11*10 + prime12;
  98   1      lcd_cmd(0x01);
  99   1      lcd_cmd(0x80);
 100   1      lcd_write_string("Received ");
 101   1      int_to_string(prime4, int_ascii);
 102   1      lcd_write_string(int_ascii);
 103   1      lcd_cmd(0xC0);
 104   1      msdelay(10);
 105   1      
 106   1      ch = receive_char();
 107   1      prime11 = ch - 48;
 108   1      ch=receive_char();
 109   1      prime12 = ch - 48;
 110   1      prime5 = prime11*10 + prime12;
 111   1      lcd_cmd(0x01);
 112   1      lcd_cmd(0x80);
 113   1      lcd_write_string("Received ");
 114   1      int_to_string(prime5, int_ascii);
 115   1      lcd_write_string(int_ascii);
 116   1      lcd_cmd(0xC0);
C51 COMPILER V9.60.7.0   MASTER                                                            04/11/2025 02:53:37 PAGE 3   

 117   1      msdelay(10);
 118   1      
 119   1      ch = receive_char();
 120   1      prime11 = ch - 48;
 121   1      ch=receive_char();
 122   1      prime12 = ch - 48;
 123   1      prime6 = prime11*10 + prime12;
 124   1      lcd_cmd(0x01);
 125   1      lcd_cmd(0x80);
 126   1      lcd_write_string("Received ");
 127   1      int_to_string(prime6, int_ascii);
 128   1      lcd_write_string(int_ascii);
 129   1      lcd_cmd(0xC0);
 130   1      msdelay(50);
 131   1      
 132   1      lcd_cmd(0x01);
 133   1      lcd_cmd(0x80);
 134   1      lcd_write_string("Sending Primes");   
 135   1      spi_init();
 136   1      SS = 0;  // Select slave
 137   1      delay();                // Short delay to ensure slave is ready
 138   1      spi_trx(prime1);        // Send first prime
 139   1      msdelay(10);
 140   1      spi_trx(prime2);        // Send second prime
 141   1      msdelay(10);
 142   1      spi_trx(prime3);
 143   1      msdelay(10);
 144   1      spi_trx(prime4);
 145   1      msdelay(10);
 146   1      spi_trx(prime5);
 147   1      msdelay(10);
 148   1      spi_trx(prime6);
 149   1      msdelay(10);
 150   1      result = spi_trx(0x00);
 151   1      msdelay(10);
 152   1      
 153   1      SS = 1; // Deselect slave
 154   1      lcd_cmd(0xC0);
 155   1      int_to_string(result, int_ascii);
 156   1      lcd_write_string(int_ascii);
 157   1      while(1);
 158   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    817    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
